/**
 * Excel Export Utility
 * Exports report data to Excel format (.xlsx)
 * Uses xlsx (SheetJS) library already installed in the project
 */

import * as XLSX from 'xlsx'

export interface ExcelExportOptions {
  reportName: string
  columns: string[]
  data: Record<string, unknown>[]
  metadata?: {
    description?: string
    generatedBy?: string
    generatedAt?: string
  }
}

/**
 * Export report data to Excel format
 * Returns a Blob that can be downloaded by the client
 */
export function exportReportToExcel(options: ExcelExportOptions): Blob {
  const { reportName, columns, data, metadata } = options

  // Create workbook
  const workbook = XLSX.utils.book_new()

  // Create worksheet from data
  const worksheet = XLSX.utils.json_to_sheet(data, {
    header: columns,
  })

  // Auto-size columns based on content
  const columnWidths = columns.map((col) => {
    const maxLength = Math.max(col.length, ...data.map((row) => String(row[col] || '').length))
    return { wch: Math.min(maxLength + 2, 50) } // Cap at 50 characters
  })
  worksheet['!cols'] = columnWidths

  // Bold headers (first row)
  const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1')
  for (let col = range.s.c; col <= range.e.c; col++) {
    const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col })
    if (!worksheet[cellAddress]) continue
    worksheet[cellAddress].s = {
      font: { bold: true },
      fill: { fgColor: { rgb: 'E8F0FE' } }, // Light blue background
    }
  }

  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Report Data')

  // Add metadata sheet if provided
  if (metadata) {
    const metadataSheet = XLSX.utils.aoa_to_sheet([
      ['Report Name', reportName],
      ['Description', metadata.description || ''],
      ['Generated By', metadata.generatedBy || ''],
      ['Generated At', metadata.generatedAt || new Date().toLocaleString()],
      ['Total Records', data.length.toString()],
    ])

    // Auto-size metadata columns
    metadataSheet['!cols'] = [{ wch: 20 }, { wch: 50 }]

    XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Metadata')
  }

  // Generate Excel file buffer
  const excelBuffer = XLSX.write(workbook, {
    bookType: 'xlsx',
    type: 'array',
    cellStyles: true,
  })

  // Create Blob
  return new Blob([excelBuffer], {
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  })
}

/**
 * Generate filename for Excel export
 */
export function generateExcelFilename(reportName: string): string {
  const sanitized = reportName.replace(/[^a-z0-9]/gi, '_').toLowerCase()
  const timestamp = new Date().toISOString().split('T')[0]
  return `${sanitized}_${timestamp}.xlsx`
}

/**
 * Trigger browser download of Excel file
 */
export function downloadExcelFile(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
