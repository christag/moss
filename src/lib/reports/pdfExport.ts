/**
 * PDF Export Utility
 * Exports report data to PDF format with tables
 * Uses jsPDF and jspdf-autotable libraries
 */

import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'

export interface PDFExportOptions {
  reportName: string
  columns: Array<{ header: string; dataKey: string }>
  data: Record<string, unknown>[]
  metadata?: {
    description?: string
    generatedBy?: string
    generatedAt?: string
  }
  orientation?: 'portrait' | 'landscape'
}

/**
 * Export report data to PDF format
 * Returns a Blob that can be downloaded by the client
 */
export function exportReportToPDF(options: PDFExportOptions): Blob {
  const { reportName, columns, data, metadata, orientation = 'landscape' } = options

  // Create PDF document
  const doc = new jsPDF({
    orientation,
    unit: 'mm',
    format: 'a4',
  })

  // Header - Report Title
  doc.setFontSize(18)
  doc.setFont('helvetica', 'bold')
  doc.text(reportName, 14, 20)

  // Metadata section
  doc.setFontSize(10)
  doc.setFont('helvetica', 'normal')
  let yPosition = 30

  if (metadata?.description) {
    doc.text(`Description: ${metadata.description}`, 14, yPosition)
    yPosition += 6
  }

  doc.text(`Generated: ${metadata?.generatedAt || new Date().toLocaleString()}`, 14, yPosition)
  yPosition += 6

  if (metadata?.generatedBy) {
    doc.text(`By: ${metadata.generatedBy}`, 14, yPosition)
    yPosition += 6
  }

  doc.text(`Total Records: ${data.length}`, 14, yPosition)
  yPosition += 10

  // Table
  autoTable(doc, {
    startY: yPosition,
    head: [columns.map((c) => c.header)],
    body: data.map((row) =>
      columns.map((c) => {
        const value = row[c.dataKey]
        if (value === null || value === undefined) {
          return ''
        }
        // Format dates
        if (value instanceof Date) {
          return value.toLocaleDateString()
        }
        // Truncate long strings
        const str = String(value)
        return str.length > 100 ? str.substring(0, 97) + '...' : str
      })
    ),
    theme: 'grid',
    styles: {
      fontSize: 8,
      cellPadding: 2,
      overflow: 'linebreak',
      valign: 'top',
    },
    headStyles: {
      fillColor: [28, 127, 242], // Morning Blue (#1C7FF2)
      textColor: [255, 255, 255],
      fontStyle: 'bold',
      fontSize: 9,
    },
    alternateRowStyles: {
      fillColor: [250, 249, 245], // Off White (#FAF9F5)
    },
    margin: { top: yPosition, left: 14, right: 14, bottom: 20 },
    didDrawPage: (data) => {
      // Footer - Page numbers
      const pageCount = doc.getNumberOfPages()
      const pageSize = doc.internal.pageSize
      const pageHeight = pageSize.getHeight()

      doc.setFontSize(8)
      doc.setFont('helvetica', 'normal')
      doc.text(
        `Page ${data.pageNumber} of ${pageCount}`,
        pageSize.getWidth() / 2,
        pageHeight - 10,
        { align: 'center' }
      )

      // M.O.S.S. branding in footer
      doc.setFontSize(7)
      doc.setTextColor(150, 150, 150)
      doc.text('Generated by M.O.S.S.', 14, pageHeight - 10)
    },
  })

  // Generate PDF blob
  return doc.output('blob')
}

/**
 * Generate filename for PDF export
 */
export function generatePDFFilename(reportName: string): string {
  const sanitized = reportName.replace(/[^a-z0-9]/gi, '_').toLowerCase()
  const timestamp = new Date().toISOString().split('T')[0]
  return `${sanitized}_${timestamp}.pdf`
}

/**
 * Trigger browser download of PDF file
 */
export function downloadPDFFile(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
